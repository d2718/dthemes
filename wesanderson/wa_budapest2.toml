# wa_budapest2.toml
#
# A Helix theme based on the CRAN `wesanderson` package's
# "GrandBudapest2" theme.
#
# author/maintainer: Dan (github.com/d2718)

# # Syntax Scopes

# * - Class attributes, HTML tag attributes
"attribute" = "perrywinkle"

"type" = { modifiers = ["bold"] } 
# * Primitive types provided by the language (int, usize)
"type.builtin" = { bg = "wine", modifiers = ["bold"]}
#"type.enum"
"type.enum.variant" = { modifiers = [] }

#"constructor"

"constant" = "heather"
# * Special constants provided by the language (true, false, nil etc)
"constant.builtin" = { bg = "wine", fg = "heather" }
#"constant.builtin.boolean"
#"constant.character"
#"constant.character.escape"
#"constant.numeric"
#"constant.numeric.integer"
#"constant.numeric.float"

"string" = "lipstick"
"string.regexp" = { fg = "lipstick", bg = "mauve" }
#"string.special"
#"string.special.path"
#"string.special.url"
# * Erlang/Elixir atoms, Ruby symbols, Clojure keywords
"string.special.symbol" = "heather"

# * Comments
"comment" = "fog"
# * Single line comments (//)
#"comment.line"
# * Block comments (e.g. (/* */)
#"comment.block"
# * Documentation comments (e.g. /// in Rust)
#"comment.block.documentation"

#"variable"
# * Reserved language variables (self, this, super, etc.)
"variable.builtin" = { fg = "perrywinkle", modifiers = ["italic"] }
# * Function parameters
"variable.parameter" = "perrywinkle"
#"variable.other"  # ??? IDK ???
# * Fields of composite data types (e.g. structs, unions)
#"variable.other.member"

"label" = { modifiers = ["bold"], underline = { style = "dotted" } }

"punctuation" = "perrywinkle"
# * Commas, colons
#"punctuation.delimiter"
# * Parentheses, angle brackets, etc.
#"punctuation.bracket"
# * String interpolation brackets.
#"punctuation.special"

"keyword" = "latte"
#"keyword.control"
# * if, else
#"keyword.control.conditional"
# * for, while, loop
#"keyword.control.repeat"
# * import, export
#"keyword.control.import"
#"keyword.control.return"
#"keyword.control.exception"
# * or, in
#"keyword.operator"
# * Preprocessor directives (#if in C)
#"keyword.directive"
# * fn, func
#"keyword.function"
# * Keywords describing how things are stored
#"keyword.storage"
# * The type of something, class, function, var, let, etc.
# "keyword.storage.type"
# * Storage modifiers like static, mut, const, ref, etc.
"keyword.storage.modifier" = { fg = "lipstick", modifiers = ["bold"] }

# * ||, +=, >
#"operator"

#"function"
#"function.builtin"
#"function.method"
"function.macro" = { fg = "latte", bg = "wine", modifiers = ["bold"] }
# * (preprocessor in C)
#"function.special"

# * Tags (e.g. <body> in HTML)
"tag" = { modifiers = ["bold"] }
#"tag.builtin"

#"namespace"

#"special"  # ??? IDK ???

#"markup"
"markup.heading" = { modifiers = ["bold"] }
#"markup.heading.marker"
#"markup.heading.1"    # heading text for h1 through h6
#"markup.heading.2"
#"markup.heading.3"
#"markup.heading.4"
#"markup.heading.5"
#"markup.heading.6" 
"markup.list" = "perrywinkle"
#"markup.list.unnumbered"
#"markup.list.numbered"
#"markup.list.checked"
#"markup.list.unchecked"
"markup.bold" = { modifiers = ["bold"] }
"markup.italic" = { modifiers = ["italic"] }
"markup.strikethrough" = { modifiers = ["crossed_out"] }
#"markup.link"
# * URLs pointed to by links
"markup.link.url" = { underline = { style = "line" } }
# * non-URL link references
"markup.link.label" = { underline = { style = "dotted" } }
# * URL and image descriptions in links
"markup.link.text" = "lipstick"
"markup.quote" = { fg = "lipstick", modifiers = ["italic"] }
"markup.raw" = { fg = "heather", bg = "licorice" }
#"markup.raw.inline"
#"markup.raw.block"

# * version control changes
#"diff"
"diff.plus" = "heather"
"diff.minus" = "lipstick"
"diff.delta" = "latte"
"diff.delta.moved" = "fog"

# # UI Elements

# * The following markup scopes are used for themeing the editor interface.
#"markup.normal"
#"markup.normal.completion"        # for completion doc popup UI
#"markup.normal.hover"             # for hover popup UI
# * markup.heading    [already defined above]
#"markup.heading.completion"       # for completion doc popup UI
#"markup.heading.hover"            # for hover popup UI
# * markup.raw        [ already defined above]
# * markup.raw.inline [ already defined above]
#"markup.raw.inline.completion"    # for completion doc popup UI
#"markup.raw.inline.hover"         # for hover popup UI

"ui.background" = { bg = "night" }
# * Picker separator below input line
#"ui.background.separator"

"ui.cursor" = { bg = "lightest", fg = "wine" }
#"ui.cursor.normal"    
"ui.cursor.insert"     = { bg = "lipstick", fg = "velour" }
"ui.cursor.select" = { bg = "fog", fg = "lightest" }
# * Matching bracket etc.    
#"ui.cursor.match"
# * Cursor with primary selection
#"ui.cursor.primary"
#"ui.cursor.primary.normal"    
"ui.cursor.primary.insert" = { bg = "lipstick", fg = "velour" }
"ui.cursor.primary.select" = { bg = "fog", fg = "lightest" }

# * Breakpoint indicator, found in the gutter
#"ui.debug.breakpoint"
# * Indicator for the line at which debugging execution is paused at, found in the gutter
#"ui.debug.active"
#"ui.gutter"
# * Gutter for the line the cursor is on
#"ui.gutter.selected"
# * Line at which debugging execution is paused at
#"ui.highlight.frameline"
# * Line numbers
"ui.linenr" = "fog"
# * Line number for the line the cursor is on
"ui.linenr.selected" = "heather"

# * Statusline
"ui.statusline" = { bg = "wine", fg = "heather" }
# * Statusline (unfocused document)
"ui.statusline.inactive" = { bg = "mauve", fg = "perrywinkle" }
# * Statusline mode during normal mode (only if editor.color-modes is enabled)
"ui.statusline.normal" = { bg = "lightest", fg = "wine" }
# * Statusline mode during insert mode (only if editor.color-modes is enabled)
"ui.statusline.insert" = { bg = "lipstick", fg = "velour" }
# * Statusline mode during select mode (only if editor.color-modes is enabled)
"ui.statusline.select" = { bg = "mauve", fg = "perrywinkle" }
# * Separator character in statusline
#"ui.statusline.separator"

# * Documentation popups (e.g. Space + k)
"ui.popup" = { bg = "licorice", fg = "heather" }
# * Prompt for multiple key options
#"ui.popup.info"
# * Borderlines separating splits
"ui.window" = { bg = "licorice", fg = "heather" }
# * Description box for commands
"ui.help" = { bg = "licorice", fg = "heather" }
# * Command prompts, popup text, etc.
"ui.text" = "lightest"
"ui.text.focus" = { bg = "night", fg = "lipstick" }
# * Same as ui.text but when the text is inactive (e.g. suggestions)
"ui.text.inactive" = { bg = "night", fg = "perrywinkle" }
# * The key: command text in ui.popup.info boxes
"ui.text.info" = { bg = "licorice", fg = "perrywinkle" }

"ui.virtual" = { fg = "mauve" }
# * Ruler columns (see the editor.rulers config)
"ui.virtual.ruler" = { bg = "wine" }
"ui.virtual.whitespace" = { fg = "mauve" }
#"ui.virtual.indent-guide"
# * Default style for inlay hints of all kinds
"ui.virtual.inlay-hint" = { fg = "fog", bg = "licorice" }
# * Style for inlay hints of kind parameter (LSPs are not required to set a kind)
#"ui.virtual.inlay-hint.parameter"
# * Style for inlay hints of kind type (LSPs are not required to set a kind)
#"ui.virtual.inlay-hint.type"
# * Soft-wrap indicator (see the editor.soft-wrap config)
#"ui.virtual.wrap"

# * Code and command completion menus
"ui.menu" = { bg = "licorice", fg = "heather" }
# * Selected autocomplete item
"ui.menu.selected" = { bg = "velour", fg = "candy" }
# * fg sets thumb color, bg sets track color of scrollbar
#"ui.menu.scroll"
# * For selections in the editing area
"ui.selection" = { bg = "mauve" }
"ui.selection.primary" = { bg = "mauve" }
# * Highlighted lines in the picker preview
"ui.highlight" = { fg = "perrywinkle", bg = "mauve" }

# * The next four only matter if editor.cursorline is enabled in config.
"ui.cursorline.primary" = { bg = "velour" }       # The line of the primary cursor
#"ui.cursorline.secondary"     # The lines of any other cursors
"ui.cursorcolumn.primary" = { bg = "velour" }    # The column of the primary cursor
#"ui.cursorcolumn.secondary"   # The columns of any other cursors

# * The next four are for gutter indicators.
"warning" = "latte"
"error"   = "lipstick"
"info"    = "heather"
"hint"    = "perrywinkle"
# * For diagnostic indication in the editing area
#"diagnostic"
"diagnostic.hint" = { underline = { style = "curl", color = "perrywinkle" } }
"diagnostic.info" = { underline = { style = "curl", color = "heather" } }
"diagnostic.warning" = { underline = { style = "curl", color = "latte" } }
"diagnostic.error"   = { underline = { style = "curl", color = "lipstick" } }

[palette]

night       = "#0f131c"
velour      = "#2d3b54"
perrywinkle = "#7294d4"

fog      = "#696d83"
heather  = "#c6cdf7"
lightest = "#e0e4fa"

wine     = "#3d2a34"
mauve    = "#5c404e"
lipstick = "#e6a0c4"

licorice = "#1c1514"
latte    = "#d8a499"
